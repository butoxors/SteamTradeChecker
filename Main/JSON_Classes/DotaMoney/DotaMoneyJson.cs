// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Main;
//
//    var dotaMoney = DotaMoney.FromJson(jsonString);

namespace Main.JSON_Classes.DotaMoney
{
    using System;
    using System.Collections.Generic;
    using Support;
    using Newtonsoft.Json;

    public partial class DotaMoneyJson
    {
        [JsonProperty("id")]
        public List<string> Id { get; set; }

        [JsonProperty("o")]
        public long O { get; set; }
        //Price
        [JsonProperty("p")]
        public double P { get; set; }

        [JsonProperty("g", NullValueHandling = NullValueHandling.Ignore)]
        public List<List<G>> G { get; set; }

        [JsonProperty("b", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> B { get; set; }

        [JsonProperty("vi", NullValueHandling = NullValueHandling.Ignore)]
        public List<long> Vi { get; set; }

        [JsonProperty("ai", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Ai { get; set; }

        [JsonProperty("bi", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Bi { get; set; }

        [JsonProperty("s", NullValueHandling = NullValueHandling.Ignore)]
        public List<List<Empty>> S { get; set; }

        [JsonProperty("ss", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Ss { get; set; }

        [JsonProperty("ui", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> Ui { get; set; }

        [JsonProperty("cp", NullValueHandling = NullValueHandling.Ignore)]
        public double? Cp { get; set; }

        [JsonProperty("pd", NullValueHandling = NullValueHandling.Ignore)]
        public double? Pd { get; set; }

        [JsonProperty("f", NullValueHandling = NullValueHandling.Ignore)]
        public List<D> F { get; set; }

        [JsonProperty("d", NullValueHandling = NullValueHandling.Ignore)]
        public List<D> D { get; set; }

        [JsonProperty("n", NullValueHandling = NullValueHandling.Ignore)]
        public List<D> N { get; set; }

        [JsonProperty("ar", NullValueHandling = NullValueHandling.Ignore)]
        public List<Ar> Ar { get; set; }

        [JsonProperty("j", NullValueHandling = NullValueHandling.Ignore)]
        public long? J { get; set; }

        [JsonProperty("i", NullValueHandling = NullValueHandling.Ignore)]
        public string I { get; set; }

        [JsonProperty("t", NullValueHandling = NullValueHandling.Ignore)]
        public string T { get; set; }

        [JsonProperty("re", NullValueHandling = NullValueHandling.Ignore)]
        public long? Re { get; set; }

        [JsonProperty("c", NullValueHandling = NullValueHandling.Ignore)]
        public string C { get; set; }

        [JsonProperty("v", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? V { get; set; }

        [JsonProperty("ru", NullValueHandling = NullValueHandling.Ignore)]
        public long? Ru { get; set; }
    }

    public partial class Ar
    {
        [JsonProperty("add_price")]
        public double AddPrice { get; set; }

        [JsonProperty("reason")]
        public string Reason { get; set; }
    }

    public partial class G
    {
        [JsonProperty("i", NullValueHandling = NullValueHandling.Ignore)]
        public string I { get; set; }

        [JsonProperty("n", NullValueHandling = NullValueHandling.Ignore)]
        public string N { get; set; }

        [JsonProperty("t")]
        public string T { get; set; }

        [JsonProperty("o", NullValueHandling = NullValueHandling.Ignore)]
        public long? O { get; set; }

        [JsonProperty("c", NullValueHandling = NullValueHandling.Ignore)]
        public string C { get; set; }

        [JsonProperty("v", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? V { get; set; }
    }

    public partial class Empty
    {
        [JsonProperty("n")]
        public string N { get; set; }

        [JsonProperty("c", NullValueHandling = NullValueHandling.Ignore)]
        public long? C { get; set; }

        [JsonProperty("l", NullValueHandling = NullValueHandling.Ignore)]
        public long? L { get; set; }
    }

    public partial struct D
    {
        public long? Integer;
        public string String;

        public static implicit operator D(long Integer) => new D { Integer = Integer };
        public static implicit operator D(string String) => new D { String = String };
        public bool IsNull => Integer == null && String == null;
    }

    public partial class DotaMoneyJson
    {
        public static List<DotaMoneyJson> FromJson(string json) => JsonConvert.DeserializeObject<List<DotaMoneyJson>>(json, Converter.Settings);
    }

    public static class SerializeMoney
    {
        public static string ToJson(this List<DotaMoneyJson> self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal class DConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(D) || t == typeof(D?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return new D { };
                case JsonToken.Integer:
                    var integerValue = serializer.Deserialize<long>(reader);
                    return new D { Integer = integerValue };
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new D { String = stringValue };
            }
            throw new Exception("Cannot unmarshal type D");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (D)untypedValue;
            if (value.IsNull)
            {
                serializer.Serialize(writer, null);
                return;
            }
            if (value.Integer != null)
            {
                serializer.Serialize(writer, value.Integer.Value);
                return;
            }
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            throw new Exception("Cannot marshal type D");
        }

        public static readonly DConverter Singleton = new DConverter();
    }

    internal class ParseStringConverterMoney : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class DecodeArrayConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(List<long>);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            reader.Read();
            var value = new List<long>();
            while (reader.TokenType != JsonToken.EndArray)
            {
                var converter = ParseStringConverter.Singleton;
                var arrayItem = (long)converter.ReadJson(reader, typeof(long), null, serializer);
                value.Add(arrayItem);
                reader.Read();
            }
            return value;
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (List<long>)untypedValue;
            writer.WriteStartArray();
            foreach (var arrayItem in value)
            {
                var converter = ParseStringConverter.Singleton;
                converter.WriteJson(writer, arrayItem, serializer);
            }
            writer.WriteEndArray();
            return;
        }

        public static readonly DecodeArrayConverter Singleton = new DecodeArrayConverter();
    }
}
