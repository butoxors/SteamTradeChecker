// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Main.Cookie;
//
//    var lootCookies = LootCookies.FromJson(jsonString);

namespace Main.CookieDef
{
    using System;
    using System.Collections.Generic;
    using Main.Support;
    using Newtonsoft.Json;

    /// <summary>
    /// 
    /// </summary>
    public partial class Cookies
    {
        [JsonProperty("domain")]
        public string Domain { get; set; }

        [JsonProperty("expirationDate", NullValueHandling = NullValueHandling.Ignore)]
        public long? ExpirationDate { get; set; }

        [JsonProperty("hostOnly")]
        public bool HostOnly { get; set; }

        [JsonProperty("httpOnly")]
        public bool HttpOnly { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("path")]
        public string Path { get; set; }

        [JsonProperty("sameSite")]
        public string SameSite { get; set; }

        [JsonProperty("secure")]
        public bool Secure { get; set; }

        [JsonProperty("session")]
        public bool Session { get; set; }

        [JsonProperty("storeId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long StoreId { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }

        [JsonProperty("id")]
        public long Id { get; set; }
    }

    public partial class Cookies
    {
        public static List<Cookies> FromJson(string json) => JsonConvert.DeserializeObject<List<Cookies>>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Cookies> self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
